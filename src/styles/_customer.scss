@import 'setting/variables';
@import 'setting/tools/_utilities.scss';
@import 'setting/utilities';
@import 'setting/typography';

//產生常用樣式
@each $key, $utility in $utilities {
  // The utility can be disabled with `false`, thus check if the utility is a map first
  // Then check if the utility needs print styles
  //@debug $key, type-of($utility) == "map", type-of($utility), $utility
  @if type-of($utility) == "map" {
    @include generate-utility($utility, "");
  }
}

// 產生位移樣式
@each $spacingKey, $spacingItem in $spacings {
  // The utility can be disabled with `false`, thus check if the utility is a map first
  @if type_of(map-get($spacingItem, values)) == "map" {
    @each $valueKey, $value in map-get($spacingItem, values) {
      @if type_of(map-get($spacingItem, property)) == "string" {
        .#{map-get($spacingItem, class)}-#{$valueKey} {
          #{map-get($spacingItem, property)}: #{$value} !important;
        }
      } @else if type_of(map-get($spacingItem, property)) == "map" {
        .#{map-get($spacingItem, class)}-#{$valueKey} {
          content: #{map-get($spacingItem, class)}-#{$valueKey};
          @each $propertyKey, $propertyValue in map-get($spacingItem, property) {
            #{$propertyValue}: #{$value} !important;
          }
        }
      } @else if type_of(map-get($spacingItem, property)) == "list" {
        .#{map-get($spacingItem, class)}-#{$valueKey} {
          content: #{map-get($spacingItem, class)}-#{$valueKey};
          @each $propertyValue in map-get($spacingItem, property) {
            #{$propertyValue}: #{$value} !important;
          }
        }
      }
    }
  }
}



// set second color style
@each $color_name, $color_color in $colors {
  //@debug 'color_name' + $color_name;
  @each $color_type, $color_value in $color_color {
    // 主色
    @if ($color_type=="base") {
      // base 主色背景
      .#{$color_name}--bg { // red--bg && red--bg.color-border
        &.color-border {
          @include border-color($color_value);
        }
        @include background-color($color_value);
      }
      // 邊框border 顏色
      .#{$color_name}--border { // red--border
        @include border-color($color_value);
      }
      // base 主色文字 以及 hover 效果色
      .#{$color_name}--text { // red--text && red--text--hover:hover
        @include text-color($color_value);
        &--hover:hover {
          @include text-color($color_value);
        }
      }
      // base 主色背景 hover
      .#{$color_name}--hover:hover { 
        @include hover-background-color($color_value);
      }
      // 次色
    } @else if ($color_type !="shades") {
      .#{$color_name}--bg.#{$color_type} {
        // 背景色補上border
        &.color-border {
          @include border-color($color_value);
        }
        @include background-color($color_value);
      }
      // 邊框調色
      .#{$color_name}--border.border--#{$color_type} {
        @include border-color($color_value);
      }
      //文字調色
      .#{$color_name}--text.text--#{$color_type} {
        @include text-color($color_value);
      }
      //文字hover調色
      .#{$color_name}--text--hover.hover--text--#{$color_type}:hover {
        @include text-color($color_value);
      }
      .#{$color_name}--hover.hover--#{$color_type}:hover {
        // 背景色補上border
        &.color-border-hover {
          @include border-color($color_value);
        }
        @include hover-background-color($color_value);
      }
    }
  }
}

// Put the loop in a function so it can't leak
@each $color_name, $color_value in $shades {
  .#{$color_name}--bg { // red--bg
    @include background-color($color_value);
  }

  .#{$color_name}--text { // red--text && red--text--hover:hover
    @include text-color($color_value);
    &--hover:hover {
      @include text-color($color_value);
    }
  }
}

// 增加圖片銳利度 避免縮放失真
.sharp-image {
  // eslint-disable
  image-rendering: -webkit-optimize-contrast;
  //image-rendering: pixelated; //
  image-rendering: -webkit-crisp-edges; //
  image-rendering: -moz-crisp-edges; //firefox
  image-rendering: -o-crisp-edges; //opera
  image-rendering: crisp-edges;
}


//.to-pink-500	{
//  --tw-gradient-to: #ec4899;
//}
//.to-pink-600 {
//  --tw-gradient-to: #db2777;
//}
//.to-blue-500 {
//  --tw-gradient-to: #3b82f6;
//}
//.from-teal-400 {
//  --tw-gradient-from: #2dd4bf;
//  --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to,rgba(45,212,191,0));
//}
//.bg-gradient-to-r {
//  background-image: linear-gradient(to right,var(--tw-gradient-stops));
//}
